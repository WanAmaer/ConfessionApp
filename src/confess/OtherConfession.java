/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package confess;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class OtherConfession extends javax.swing.JFrame {

    /**
     * Creates new form OtherConfession
     */
    Queue<String>queue = new Queue<>();
    int page=0;	    //For traverse in the queue
    
    public void openTabbed(int page){
	String stck = queue.getElement(page);
	String[] confession = stck.split("//");
	if (confession[1].equals("New Post")) {
	    jTextArea1.setText("#" + confession[2] + "\n[" + confession[3] + "]\n\n" + confession[4]);
	} else {
	    jTextArea1.setText("#" + confession[2] + "\n[" + confession[3] + "]\n\nReply to " + confession[1] + "\n" + confession[4]);
	}
    }
    
    public OtherConfession() throws IOException {
	initComponents();
	Stack<String>stack = new Stack<>();
	//To sort the confession by time
	int foo=0;
	try {
	    File myObj = new File("Confession.txt");
	    Scanner myReader = new Scanner(myObj);
	    while (myReader.hasNextLine()) {
		String data = myReader.nextLine();
		stack.push(data);
		foo++;
	    }
	    myReader.close();
	} catch (FileNotFoundException e) {
	    System.out.println("An error occurred.");
	    e.printStackTrace();
	}
	
	//To overwrite the file
	    try {
		FileWriter myWriter = new FileWriter("SortedConfession.txt");
		myWriter.write("Number//Reply To//UM ID//Submitted At//Confession\n");
		for(int i=stack.size(); i>1 ;i--){
		    queue.enqueue(stack.peek());
		    myWriter.write(stack.pop()+"\n");
		}
		
		myWriter.close();
	    } catch (IOException e) {
		System.out.println(e);
	    }   
	
	try {
	    BufferedReader reader = new BufferedReader(new FileReader("SortedConfession.txt"));
	    String firstLine = reader.readLine().trim();
	    String[] columnsName = firstLine.split("//");
	    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
	    model.setColumnIdentifiers(columnsName);

	    Object[] tableLines = reader.lines().toArray();
	    for (int i = 0; i < tableLines.length; i++) {
		String line = tableLines[i].toString().trim();
		String[] dataRow = line.split("//");
		model.addRow(dataRow);
	    }
	   
	    jTable1.setAutoCreateRowSorter(true);
	} catch (FileNotFoundException e) {
	    System.out.println("Error bro");
	}
	
	
//	For tab3
	String stck = queue.getElement(page);
	String[] confession = stck.split("//");
	if (confession[1].equals("New Post")) {
	    jTextArea1.setText("#" + confession[2] + "\n[" + confession[3] + "]\n\n" + confession[4]);
	} else {
	    jTextArea1.setText("#" + confession[2] + "\n[" + confession[3] + "]\n\nReply to " + confession[1] + "\n" + confession[4]);
	}

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("PMingLiU-ExtB", 1, 36)); // NOI18N
        jLabel1.setText("Let's Explore!!");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 19, 221, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Reply", "UM ID", "Time", "Confession"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jTable1ComponentHidden(evt);
            }
        });
        jScrollPane4.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, 572, 330));

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("View Confession");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, -1, 30));

        jButton8.setBackground(new java.awt.Color(0, 0, 0));
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Reply");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 50, 117, 31));
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, -100, 20, 520));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, 120, 30));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/confess/greenSky_1.gif"))); // NOI18N
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 0, 790, 420));

        jTabbedPane1.addTab("All", jPanel2);

        jTextField1.setText("Search For Keyword Here");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextField1MouseEntered(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jButton5.setText("Search");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UM ID", "Time", "Message", "Reply"
            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jTable2ComponentHidden(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jButton4.setText("View Confession");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setText("Reply");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Keyword", "Confession Post ID", "Published Date", "Published Date and Time" }));

        jButton3.setText("Menu");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Search", jPanel1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton9.setText("Previous");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Next");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Reply");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Menu");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jButton12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton11)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Confession", jPanel3);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 790, 452));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/confess/greenSky_1.gif"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 530));

        setSize(new java.awt.Dimension(816, 569));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
	new Menu_User().setVisible(true);
	dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

        //Choose row
        if(jTable1.getSelectedRowCount()==1){
            String tempID = (String)model.getValueAt(jTable1.getSelectedRow(),2);
            try {
                FileWriter myWriter = new FileWriter("tempReplyID.txt");
                myWriter.write(tempID);
                myWriter.close();
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        else if (jTable1.getSelectedRowCount()==0){
            JOptionPane.showMessageDialog(rootPane,"Please choose a confession to be replied");
        }
        else{
            JOptionPane.showMessageDialog(rootPane,"Please select only one row at a time");
        }
        new ReplyConfession_User().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

	if (jTable1.getSelectedRowCount() == 1) {
	    try {
		File myObj = new File("SortedConfession.txt");
		Scanner myReader = new Scanner(myObj);
		int foo = -1;
		while (myReader.hasNextLine()) {
		    String[] data = myReader.nextLine().split("//");
		    if (data[0].equals(String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 0)))) {
			page = foo;
		    } else {
			foo++;
		    }
		}
		myReader.close();
	    } catch (FileNotFoundException e) {
		System.out.println("An error occurred.");
		e.printStackTrace();
	    }
	    jTabbedPane1.setSelectedIndex(2);
	    openTabbed(page);
	}
        else if (jTable1.getSelectedRowCount()==0){
            JOptionPane.showMessageDialog(rootPane,"Please choose a confession to be viewed");
        }
        else{
            JOptionPane.showMessageDialog(rootPane,"Please select only one row at a time");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTable1ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable1ComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1ComponentHidden

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel model2 = (DefaultTableModel)jTable2.getModel();

        //Choose row
        if(jTable1.getSelectedRowCount()==1){
            String tempID = (String)model2.getValueAt(jTable2.getSelectedRow(),2);
            try {
                FileWriter myWriter = new FileWriter("tempReplyID.txt");
                myWriter.write(tempID);
                myWriter.close();
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        else if (jTable2.getSelectedRowCount()==0){
            JOptionPane.showMessageDialog(rootPane,"Please choose a confession to be replied");
        }
        else{
            JOptionPane.showMessageDialog(rootPane,"Please select only one row at a time");
        }
        new ReplyConfession_User().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DefaultTableModel model3 = (DefaultTableModel)jTable2.getModel();
        //Choose row
        if(jTable2.getSelectedRowCount()==1){
	    try {
		File myObj = new File("SortedConfession.txt");
		Scanner myReader = new Scanner(myObj);
		int foo=-1;
		while (myReader.hasNextLine()) {
		    String[] data = myReader.nextLine().split("//");
		    if(data[0].equals(String.valueOf(model3.getValueAt(jTable2.getSelectedRow(),0))))
			page = foo;
		    else
			foo++;
		}
		myReader.close();
	    } catch (FileNotFoundException e) {
		System.out.println("An error occurred.");
		e.printStackTrace();
	    }
	    jTabbedPane1.setSelectedIndex(2);
	    openTabbed(page);
        }
        else if (jTable2.getSelectedRowCount()==0){
            JOptionPane.showMessageDialog(rootPane,"Please choose a confession to be viewed");
        }
        else{
            JOptionPane.showMessageDialog(rootPane,"Please select only one row at a time");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable2ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable2ComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2ComponentHidden

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
	// Nothing
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
	// Nothing
	
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jTextField1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseEntered
        // Nothing
    }//GEN-LAST:event_jTextField1MouseEntered

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
	String choice = (String)jComboBox1.getSelectedItem();
	
	//Current confession is for the Searching Part
	String keyword = jTextField1.getText();
        try {
            FileWriter myWriter = new FileWriter("currentConfession.txt");
            myWriter.write("Number//Reply To//UM ID//Submitted At//Confession\n");
            myWriter.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e);
        }

	//To do the searching from the SortedConfession, so that it will be sorted by the latest post
        try {
            File myObj = new File("SortedConfession.txt");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                String[] x = data.split("//");
		
		if(choice.equals("Keyword")){
		    String[] kataKunci = x[4].split(" ");
		    for (int i = 0; i < kataKunci.length; i++) {
			if(keyword.equals(kataKunci[i])){
			    try {
				BufferedWriter myFile = new BufferedWriter(new FileWriter("currentConfession.txt", true));
				myFile.write(x[0] + "//" + x[1] + "//" + x[2] + "//" + x[3] + "//" + x[4]);
				myFile.newLine();
				myFile.close();
			    } catch (IOException e) {
				JOptionPane.showMessageDialog(null, e);
			    }
			    break;
			}
		    }
		}
		else if(choice.equals("Published Date")){
		    String[] kataKunci = x[3].split(" ");
		    if (keyword.equals(kataKunci[0])) {
			try {
			    BufferedWriter myFile = new BufferedWriter(new FileWriter("currentConfession.txt", true));
			    myFile.write(x[0] + "//" + x[1] + "//" + x[2] + "//" + x[3] + "//" + x[4]);
			    myFile.newLine();
			    myFile.close();
			} catch (IOException e) {
			    JOptionPane.showMessageDialog(null, e);
			}
			break;
		    }
		}
		else if (choice.equals("Published Date and Time")) {
		    String kataKunci = x[3];
		    if (keyword.equals(kataKunci)) {
			try {
			    BufferedWriter myFile = new BufferedWriter(new FileWriter("currentConfession.txt", true));
			    myFile.write(x[0] + "//" + x[1] + "//" + x[2] + "//" + x[3] + "//" + x[4]);
			    myFile.newLine();
			    myFile.close();
			} catch (IOException e) {
			    JOptionPane.showMessageDialog(null, e);
			}
			break;
		    }
		}
		else{
		    String kataKunci = x[2];
		    for (int i = 0; i < kataKunci.length(); i++) {
			if(keyword.equals(kataKunci)){
			    try {
				BufferedWriter myFile = new BufferedWriter(new FileWriter("currentConfession.txt", true));
				myFile.write(x[0] + "//" + x[1] + "//" + x[2] + "//" + x[3] + "//" + x[4]);
				myFile.newLine();
				myFile.close();
			    } catch (IOException e) {
				JOptionPane.showMessageDialog(null, e);
			    }
			    break;
			}
		    }
		}
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
	
	//This is for displaying the table
        try {
            BufferedReader reader = new BufferedReader(new FileReader("currentConfession.txt"));
            String firstLine = reader.readLine().trim();
            String[] columnsName = firstLine.split("//");
            DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
            model.setColumnIdentifiers(columnsName);

            Object[] tableLines = reader.lines().toArray();
            for(int i=0; i<tableLines.length; i++){

                String line = tableLines[i].toString().trim();
                String[] dataRow = line.split("//");
                model2.addRow(dataRow);
            }
            reader.close();
        } catch (FileNotFoundException e) {
            System.out.println("Error bro");
        } catch (IOException ex) {
            Logger.getLogger(OtherConfession.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
	DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
	String choice = (String)jComboBox1.getSelectedItem();
	
	//Current confession is for the Searching Part
	String keyword = jTextField1.getText();
        try {
            FileWriter myWriter = new FileWriter("currentConfession.txt");
            myWriter.write("Number//Reply To//UM ID//Submitted At//Confession\n");
            myWriter.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e);
        }

	//To do the searching from the SortedConfession, so that it will be sorted by the latest post
        try {
            File myObj = new File("SortedConfession.txt");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                String[] x = data.split("//");
		
		if(choice.equals("Keyword")){
		    String[] kataKunci = x[4].split(" ");
		    for (int i = 0; i < kataKunci.length; i++) {
			if(keyword.equals(kataKunci[i])){
			    try {
				BufferedWriter myFile = new BufferedWriter(new FileWriter("currentConfession.txt", true));
				myFile.write(x[0] + "//" + x[1] + "//" + x[2] + "//" + x[3] + "//" + x[4]);
				myFile.newLine();
				myFile.close();
			    } catch (IOException e) {
				JOptionPane.showMessageDialog(null, e);
			    }
			    break;
			}
		    }
		}
		else if(choice.equals("Published Date")){
		    String[] kataKunci = x[3].split(" ");
		    if (keyword.equals(kataKunci[0])) {
			try {
			    BufferedWriter myFile = new BufferedWriter(new FileWriter("currentConfession.txt", true));
			    myFile.write(x[0] + "//" + x[1] + "//" + x[2] + "//" + x[3] + "//" + x[4]);
			    myFile.newLine();
			    myFile.close();
			} catch (IOException e) {
			    JOptionPane.showMessageDialog(null, e);
			}
			break;
		    }
		}
		else if (choice.equals("Published Date and Time")) {
		    String kataKunci = x[3];
		    if (keyword.equals(kataKunci)) {
			try {
			    BufferedWriter myFile = new BufferedWriter(new FileWriter("currentConfession.txt", true));
			    myFile.write(x[0] + "//" + x[1] + "//" + x[2] + "//" + x[3] + "//" + x[4]);
			    myFile.newLine();
			    myFile.close();
			} catch (IOException e) {
			    JOptionPane.showMessageDialog(null, e);
			}
			break;
		    }
		}
		else{
		    String kataKunci = x[2];
		    for (int i = 0; i < kataKunci.length(); i++) {
			if(keyword.equals(kataKunci)){
			    try {
				BufferedWriter myFile = new BufferedWriter(new FileWriter("currentConfession.txt", true));
				myFile.write(x[0] + "//" + x[1] + "//" + x[2] + "//" + x[3] + "//" + x[4]);
				myFile.newLine();
				myFile.close();
			    } catch (IOException e) {
				JOptionPane.showMessageDialog(null, e);
			    }
			    break;
			}
		    }
		}
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
	
	//This is for displaying the table
        try {
            BufferedReader reader = new BufferedReader(new FileReader("currentConfession.txt"));
            String firstLine = reader.readLine().trim();
            String[] columnsName = firstLine.split("//");
            DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
            model.setColumnIdentifiers(columnsName);

            Object[] tableLines = reader.lines().toArray();
            for(int i=0; i<tableLines.length; i++){

                String line = tableLines[i].toString().trim();
                String[] dataRow = line.split("//");
                model2.addRow(dataRow);
            }
            reader.close();
        } catch (FileNotFoundException e) {
            System.out.println("Error bro");
        } catch (IOException ex) {
            Logger.getLogger(OtherConfession.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
	if(page==0)
	    JOptionPane.showMessageDialog(rootPane, "This is the latest page");
	else{
	    page--;
	    openTabbed(page);
	}
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
	if(page==queue.getSize()-1)
	    JOptionPane.showMessageDialog(rootPane, "This is the last page");
	else{
	    page++;
	    String stck = queue.getElement(page);
	    String[] confession = stck.split("//");
	    if (confession[1] == "New Post") {
		jTextArea1.setText("#" + confession[2] + "\n[" + confession[3] + "]\n\n" + confession[4]);
	    } else {
		jTextArea1.setText("#" + confession[2] + "\n[" + confession[3] + "]\n\nReply to " + confession[1] + "\n" + confession[4]);
	    }
	}
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
	
	String stck = queue.getElement(page);
	String[] confession = stck.split("//");
	
	//tempID is for the replyPostID
	String tempID = confession[2];
	try {
	    FileWriter myWriter = new FileWriter("tempReplyID.txt");
	    myWriter.write(tempID);
	    myWriter.close();
	} catch (IOException e) {
	    System.out.println(e);
	}
	new ReplyConfession_User().setVisible(true);
	dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        new Menu_User().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        new Menu_User().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton12ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(OtherConfession.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(OtherConfession.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(OtherConfession.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(OtherConfession.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		try {
		    new OtherConfession().setVisible(true);
		} catch (IOException ex) {
		    Logger.getLogger(OtherConfession.class.getName()).log(Level.SEVERE, null, ex);
		}
	    }
	});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
